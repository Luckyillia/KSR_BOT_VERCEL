const supabase = require('./supabaseClient');
const { Markup } = require('telegraf');

async function viewBookings(ctx) {
  const { data: bookings, error } = await supabase
    .from('bookings')
    .select(`
      id,
      user_id,
      user_name,
      booking_date,
      cars (id, name, stage, price_day, price_week, price_month, zalog, img)
    `)
    .order('booking_date', { ascending: false });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π");
    return;
  }

  if (bookings.length === 0) {
    await ctx.editMessageText("üì≠ *–°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.*", {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
        ]
      }
    });
  } else {
    const bookingInfo = bookings.map((booking, index) => [
      { text: `#${index + 1} ${booking.cars.name} üóíÔ∏è`, callback_data: `booking_info_${booking.id}` },
      { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', callback_data: `add_to_used_${booking.id}` },
      { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_booking_${booking.id}` }
    ]);

    await ctx.editMessageText("üìú *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:*", {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          ...bookingInfo,
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
        ]
      }
    });
  }
}

async function handleManageCars(ctx) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", callback_data: 'add_car' }],
        [{ text: "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ", callback_data: 'delete_car' }],
        [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ", callback_data: 'find_car_to_edit' }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
      ]
    }
  });
}

async function handleAddCar(ctx, userStates) {
  await ctx.answerCbQuery();
  userStates[ctx.from.id] = 'adding_car';
  await ctx.editMessageText("üì• *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n\n–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Ç–µ–π–¥–∂–∏ | –¶–µ–Ω–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü) | –ó–∞–ª–æ–≥ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }]
        ]
      }
    });
}

async function handleDeleteCar(ctx, userStates) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }]
        ]
      }
    });
  userStates[ctx.from.id] = 'delete_car';
}

async function handleFindCarToEdit(ctx, userStates) {
  await ctx.answerCbQuery();
  userStates[ctx.from.id] = { state: 'finding_car' };
  await ctx.editMessageText("‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:*",
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏", callback_data: 'manage_cars' }]
        ]
      }
    });
}

async function handleDeleteBooking(ctx, bookingId) {
  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
  const { data: booking, error: fetchError } = await supabase
    .from('bookings')
    .select('*, cars(id, name)')
    .eq('id', bookingId)
    .single();

  if (fetchError || !booking) {
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    return;
  }

  // –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { error: deleteError } = await supabase
    .from('bookings')
    .delete()
    .eq('id', bookingId);

  if (deleteError) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', deleteError);
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
    return;
  }

  // –í–µ—Ä–Ω—É—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
  const { error: updateError } = await supabase
    .from('cars')
    .update({ is_available: true })
    .eq('id', booking.car_id);

  if (updateError) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', updateError);
  }

  await ctx.answerCbQuery(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${booking.cars.name} —É–¥–∞–ª–µ–Ω–æ.`);

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  await viewBookings(ctx);
}

async function handleBookingInfo(ctx, bookingId) {
  const { data: booking, error } = await supabase
    .from('bookings')
    .select('*, cars(name)')
    .eq('id', bookingId)
    .single();

  if (error || !booking) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    return;
  }

  const userLink = `[${booking.user_name}](tg://user?id=${booking.user_id})`;
  const carName = booking.cars.name;
  const date = new Date(booking.booking_date).toLocaleString('ru-RU');

  await ctx.editMessageText(
    `üìÑ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:*\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userLink}\nüöó –ê–≤—Ç–æ: ${carName}\nüìÖ –î–∞—Ç–∞: ${date}`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
        ]
      }
    }
  );
}

async function listCarForAdmin(ctx){
  const { data: cars, error } = await supabase
    .from('cars')
    .select('id, name, is_available')
    .order('id');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ:', error);
    await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π");
    return;
  }

  let list = 'üìÑ **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ**\n\n';
  cars.forEach((car, idx) => {
    const status = car.is_available ? '‚úÖ' : '‚ùå';
    list += `${idx + 1}. ${car.name} ${status}\n`;
  });

  ctx.editMessageText(list, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: 'back_to_admin' }]
      ]
    }
  });
}

module.exports = {
  handleManageCars,
  handleDeleteCar,
  handleAddCar,
  viewBookings,
  handleFindCarToEdit,
  handleBookingInfo,
  handleDeleteBooking,
  listCarForAdmin
};
