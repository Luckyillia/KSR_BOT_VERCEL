const { Markup } = require('telegraf');
const supabase = require('./supabaseClient');
const { sendCarData, filterByPrice } = require('./carFunctions.js');

let filteredCars = [];

function getFilteredCars() {
  return filteredCars;
}

async function handleMessage(ctx, userStates, userCarIndex, adminChatId, adminAssistantChatId) {
  if (ctx.message.photo || ctx.message.sticker || ctx.message.animation) {
    await ctx.reply("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    try {
      await ctx.deleteMessage();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
    return;
  }

  const userId = ctx.from.id;
  const state = userStates[userId];

  switch (state?.state || state) {
    case 'adding_car': {
      const data = ctx.message.text.split('|').map(part => part.trim());

      if (data.length === 5) {
        const [name, stage, prices, zalog, img] = data;
        const priceParts = prices.split('/');

        if (priceParts.length === 3 && priceParts.every(price => !isNaN(price))) {
          const { error } = await supabase
            .from('cars')
            .insert({
              name,
              stage,
              price_day: priceParts[0],
              price_week: priceParts[1],
              price_month: priceParts[2],
              zalog,
              img: [img],
              is_available: true
            });

          if (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
            return;
          }

          await ctx.reply(
            "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')])
          );

          const userName = ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
          const userLink = `[${userName}](tg://user?id=${userId})`;
          const carData = `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${name}\nüõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${stage}\nüí∞ *–¶–µ–Ω–∞*: ${priceParts[0]} –¥–µ–Ω—å / ${priceParts[1]} –Ω–µ–¥–µ–ª—è / ${priceParts[2]} –º–µ—Å—è—Ü\nüîë *–ó–∞–ª–æ–≥*: ${zalog}\n`;
          
          if (adminChatId != ctx.from.id && adminAssistantChatId == ctx.from.id) {
            await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
          }
          if (adminChatId == ctx.from.id && adminAssistantChatId != ctx.from.id) {
            await ctx.telegram.sendMessage(adminAssistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
          }
          delete userStates[userId];
        } else {
          await ctx.reply("üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!* \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n*—Ü–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å / —Ü–µ–Ω–∞ –∑–∞ –Ω–µ–¥–µ–ª—é / —Ü–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü*\n\n–ü—Ä–∏–º–µ—Ä: `1000/6000/20000`");
        }
      } else {
        await ctx.reply(
          "üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!* \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:\n`–∏–º—è|—Å—Ç–∞–¥–∏—è|—Ü–µ–Ω–∞_–∑–∞_–¥–µ–Ω—å/—Ü–µ–Ω–∞_–∑–∞_–Ω–µ–¥–µ–ª—é/—Ü–µ–Ω–∞_–∑–∞_–º–µ—Å—è—Ü|–∑–∞–ª–æ–≥|—Å—Å—ã–ª–∫–∞_–Ω–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`\n\n–ü—Ä–∏–º–µ—Ä:\n`Toyota Camry|2020|1000/6000/20000|5000|Toyota_Camry.png`"
        );
      }
      break;
    }

    case 'finding_car': {
      const carName = ctx.message.text.trim();
      const { data: cars, error } = await supabase
        .from('cars')
        .select('*')
        .ilike('name', `%${carName}%`);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
        return;
      }

      if (cars && cars.length > 0) {
        userStates[userId] = { state: 'editing_car', car: cars[0] };
        await ctx.reply("‚úÖ *–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω.*\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Ç–µ–π–¥–∂–∏ | –¶–µ–Ω–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü) | –ó–∞–ª–æ–≥ | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`", { parse_mode: 'Markdown' });
      } else {
        await ctx.reply("‚ùå *–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*");
      }
      break;
    }

    case 'editing_car': {
      const car = state.car;
      const data = ctx.message.text.split('|').map(part => part.trim());

      if (data.length === 5) {
        const prices = data[2].split('/');
        
        const { error } = await supabase
          .from('cars')
          .update({
            name: data[0],
            stage: data[1],
            price_day: prices[0].trim(),
            price_week: prices[1].trim(),
            price_month: prices[2].trim(),
            zalog: data[3],
            img: [data[4]]
          })
          .eq('id', car.id);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
          return;
        }

        await ctx.reply("‚úÖ *–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*", Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')]));

        const userName = ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        const userLink = `[${userName}](tg://user?id=${userId})`;
        const carData = `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${data[0]}\nüõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${data[1]}\nüí∞ *–¶–µ–Ω–∞*: ${prices[0]} –¥–µ–Ω—å / ${prices[1]} –Ω–µ–¥–µ–ª—è / ${prices[2]} –º–µ—Å—è—Ü\nüîë *–ó–∞–ª–æ–≥*: ${data[3]}\n`;
        
        if (adminChatId != ctx.from.id && adminAssistantChatId == ctx.from.id) {
          await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –æ–±–Ω–æ–≤–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
        }
        if (adminChatId == ctx.from.id && adminAssistantChatId != ctx.from.id) {
          await ctx.telegram.sendMessage(adminAssistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –æ–±–Ω–æ–≤–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
        }

        delete userStates[userId];
      } else {
        await ctx.reply("üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!*");
      }
      break;
    }

    case 'delete_car': {
      const carName = ctx.message.text.trim();
      
      const { data: cars, error: findError } = await supabase
        .from('cars')
        .select('*')
        .ilike('name', carName);

      if (findError || !cars || cars.length === 0) {
        await ctx.reply("‚ùå *–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", { parse_mode: 'Markdown' });
        return;
      }

      const car = cars[0];
      const { error: deleteError } = await supabase
        .from('cars')
        .delete()
        .eq('id', car.id);

      if (deleteError) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', deleteError);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
        return;
      }

      await ctx.reply(`‚úÖ *–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${carName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.*`, Markup.inlineKeyboard([Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª', 'back_to_admin')]));

      const userName = ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
      const userLink = `[${userName}](tg://user?id=${userId})`;
      const carData = `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${car.name}\nüõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${car.stage}\nüí∞ *–¶–µ–Ω–∞*: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\nüîë *–ó–∞–ª–æ–≥*: ${car.zalog}\n`;
      
      if (adminChatId != ctx.from.id && adminAssistantChatId == ctx.from.id) {
        await ctx.telegram.sendMessage(adminChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} —É–¥–∞–ª–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
      }
      if (adminChatId == ctx.from.id && adminAssistantChatId != ctx.from.id) {
        await ctx.telegram.sendMessage(adminAssistantChatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} —É–¥–∞–ª–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n${carData}`, { parse_mode: 'Markdown' });
      }

      delete userStates[userId];
      break;
    }

    case 'filter_cars': {
      const priceRange = ctx.message.text.trim();
      
      const { data: allCars, error } = await supabase
        .from('cars')
        .select('*')
        .eq('is_available', true);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.");
        return;
      }

      filteredCars = filterByPrice(allCars, priceRange);

      if (filteredCars.length > 0) {
        userCarIndex[userId] = 0;
        await sendCarData(ctx, filteredCars, userCarIndex[userId], true);
      } else {
        await ctx.reply("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }

      delete userStates[userId];
      break;
    }

    case 'awaiting_month_term': {
      const term = parseInt(ctx.message.text.trim());
      
      if (isNaN(term) || term <= 0) {
        await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤.");
        return;
      }

      const bookingId = state.bookingId;
      
      // –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const { data: booking, error: bookingError } = await supabase
        .from('bookings')
        .select('*, cars(*)')
        .eq('id', bookingId)
        .single();

      if (bookingError || !booking) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        return;
      }

      const startDate = new Date();
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + term);

      // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ
      const { error: usedCarError } = await supabase
        .from('used_cars')
        .insert({
          car_id: booking.car_id,
          user_id: booking.user_id,
          user_name: booking.user_name,
          rental_duration: 'month',
          rental_term: term,
          start_date: startDate.toISOString(),
          end_date: endDate.toISOString()
        });

      if (usedCarError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã:", usedCarError);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
        return;
      }

      // –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await supabase
        .from('bookings')
        .delete()
        .eq('id', bookingId);

      await ctx.reply(`üöó –í—ã –¥–∞–ª–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ ${term} –º–µ—Å—è—Ü(–µ–≤): ${booking.cars.name}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
          ]
        }
      });

      const userLink = `[${ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}](tg://user?id=${userId})`;
      const messageText = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\nüöó ${booking.cars.name}\nüìÖ –°—Ä–æ–∫: ${term} –º–µ—Å—è—Ü(–µ–≤)`;
      
      if (adminChatId !== ctx.from.id && adminAssistantChatId === ctx.from.id) {
        await ctx.telegram.sendMessage(adminChatId, messageText, { parse_mode: 'Markdown' });
      }
      if (adminChatId === ctx.from.id && adminAssistantChatId !== ctx.from.id) {
        await ctx.telegram.sendMessage(adminAssistantChatId, messageText, { parse_mode: 'Markdown' });
      }

      delete userStates[userId];
      break;
    }

    default:
      await ctx.reply("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.");
      break;
  }
}

module.exports = {
  handleMessage,
  getFilteredCars
};
