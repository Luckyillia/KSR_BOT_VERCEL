const { Markup } = require('telegraf');

async function sendCar(ctx, index, supabase) {
  const { data: cars, error } = await supabase
    .from('cars')
    .select('*')
    .eq('is_available', true)
    .order('id');

  if (error || !cars || cars.length === 0) {
    return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.");
  }

  if (index < 0 || index >= cars.length) {
    return ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
  }

  const car = cars[index];
  const carData = formatCarData(car);
  const imagePath = getCarImagePath(car.img[0]);

  try {
    await ctx.replyWithPhoto(
      { source: imagePath },
      {
        caption: carData,
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_car'),
            Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'),
            Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_car')
          ],
          [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
        ])
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
  }
}

async function editCar(ctx, index, supabase) {
  const { data: cars, error } = await supabase
    .from('cars')
    .select('*')
    .eq('is_available', true)
    .order('id');

  if (error || !cars || cars.length === 0) {
    return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.");
  }

  if (index < 0 || index >= cars.length) {
    return ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
  }

  const car = cars[index];
  const carData = formatCarData(car);
  const imagePath = getCarImagePath(car.img[0]);

  try {
    await ctx.editMessageMedia(
      {
        type: 'photo',
        media: { source: imagePath },
        caption: carData,
        parse_mode: 'Markdown'
      },
      Markup.inlineKeyboard([
        [
          Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_car'),
          Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'),
          Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_car')
        ],
        [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
      ])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏:", error);
    ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
  }
}

async function sendCarData(ctx, index, filteredCars) {
  if (!filteredCars || filteredCars.length === 0) {
    ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
    return;
  }

  if (index < 0 || index >= filteredCars.length) {
    return ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
  }

  const car = filteredCars[index];
  const carData = formatCarData(car);
  const imagePath = getCarImagePath(car.img[0]);

  try {
    await ctx.replyWithPhoto(
      { source: imagePath },
      {
        caption: carData,
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_filtered_car'),
            Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'),
            Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_filtered_car')
          ],
          [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
        ])
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
  }
}

function formatCarData(car) {
  return (
    `üöó *–ù–∞–∑–≤–∞–Ω–∏–µ*: ${car.name}\n` +
    `üõ†Ô∏è *–°—Ç–µ–π–¥–∂–∏*: ${car.stage}\n` +
    `üí∞ *–¶–µ–Ω–∞*: ${car.price_day} –¥–µ–Ω—å / ${car.price_week} –Ω–µ–¥–µ–ª—è / ${car.price_month} –º–µ—Å—è—Ü\n` +
    `üîë *–ó–∞–ª–æ–≥*: ${car.zalog}\n`
  );
}

function getCarImagePath(imageName) {
  return `${process.cwd()}\\res\\img\\${imageName}`;
}

function filterByPrice(car, priceFrom, priceTo, rentPeriod) {
  let carPrice = 0;

  switch (rentPeriod) {
    case '–¥–µ–Ω—å':
      carPrice = parseInt(car.price_day);
      break;
    case '–Ω–µ–¥–µ–ª—è':
      carPrice = parseInt(car.price_week);
      break;
    case '–º–µ—Å—è—Ü':
      carPrice = parseInt(car.price_month);
      break;
    default:
      return false;
  }

  return carPrice >= priceFrom && carPrice <= priceTo;
}

async function editFilteredCar(ctx, index, filteredCars) {
  if (!filteredCars || filteredCars.length === 0) {
    ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
    return;
  }
  if (index < 0 || index >= filteredCars.length) {
    ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è.");
    return;
  }

  const car = filteredCars[index];
  const carData = formatCarData(car);
  const imagePath = getCarImagePath(car.img[0]);

  try {
    await ctx.editMessageMedia(
      {
        type: 'photo',
        media: { source: imagePath },
        caption: carData,
        parse_mode: 'Markdown'
      },
      Markup.inlineKeyboard([
        [
          Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 'prev_filtered_car'),
          Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', 'book_car'),
          Markup.button.callback('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', 'next_filtered_car')
        ],
        [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'go_to_main')]
      ])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏:", error);
    ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${car.name}.`);
  }
}

module.exports = {
  sendCar,
  editCar,
  sendCarData,
  filterByPrice,
  editFilteredCar
};
