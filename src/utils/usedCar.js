const supabase = require('./supabaseClient');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∞—Ä–µ–Ω–¥—ã
async function handleChooseRentalDuration(ctx, bookingId) {
  await ctx.answerCbQuery();
  await ctx.editMessageText("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–î–µ–Ω—å", callback_data: `day_${bookingId}` }],
        [{ text: "–ù–µ–¥–µ–ª—è", callback_data: `week_${bookingId}` }],
        [{ text: "–ú–µ—Å—è—Ü", callback_data: `month_${bookingId}` }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
      ]
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async function handleAddToUsed(ctx, bookingId, adminChatId, adminAssistantChatId) {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –≤ –¥–Ω—è—Ö –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const rentalDuration = getRentalDuration(ctx.callbackQuery.data);
  if (!rentalDuration) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã.");
    return;
  }

  try {
    // –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { data: booking, error: bookingError } = await supabase
      .from('bookings')
      .select('*, cars(*)')
      .eq('id', bookingId)
      .single();

    if (bookingError || !booking) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }

    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + rentalDuration.days);

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ
    const { error: usedCarError } = await supabase
      .from('used_cars')
      .insert({
        car_id: booking.car_id,
        user_id: booking.user_id,
        user_name: booking.user_name,
        rental_duration: rentalDuration.type,
        rental_term: 1,
        start_date: startDate.toISOString(),
        end_date: endDate.toISOString()
      });

    if (usedCarError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã:", usedCarError);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
      return;
    }

    // –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { error: deleteError } = await supabase
      .from('bookings')
      .delete()
      .eq('id', bookingId);

    if (deleteError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", deleteError);
    }

    await ctx.editMessageText(`üöó –í—ã –¥–∞–ª–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ ${rentalDuration.text}: ${booking.cars.name}`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
        ]
      }
    });

    const userLink = `[${ctx.from.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}](tg://user?id=${userId})`;
    const messageText = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLink} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\nüöó ${booking.cars.name}`;
    if (adminChatId !== ctx.from.id && adminAssistantChatId === ctx.from.id) {
      await ctx.telegram.sendMessage(adminChatId, messageText, { parse_mode: 'Markdown' });
    }
    if (adminChatId === ctx.from.id && adminAssistantChatId !== ctx.from.id) {
      await ctx.telegram.sendMessage(adminAssistantChatId, messageText, { parse_mode: 'Markdown' });
    }

    console.log(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${booking.cars.name} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleAddToUsed:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã
function getRentalDuration(callbackData) {
  const parts = callbackData.split('_');
  const durationType = parts[0]; // day, week, month
  switch (durationType) {
    case 'day':
      return { days: 1, text: '1 –¥–µ–Ω—å', type: 'day' };
    case 'week':
      return { days: 7, text: '1 –Ω–µ–¥–µ–ª—è', type: 'week' };
    case 'month':
      return { days: 30, text: '1 –º–µ—Å—è—Ü', type: 'month' };
    default:
      return null;
  }
}

async function checkExpiredRentals(ctx, adminChatId, adminAssistantChatId) {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Ä–æ–∫–æ–≤ –∞—Ä–µ–Ω–¥—ã –Ω–∞—á–∞—Ç–∞...");

  const currentDate = new Date();

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã
  const { data: expiredRentals, error } = await supabase
    .from('used_cars')
    .select('*, cars(id, name)')
    .lt('end_date', currentDate.toISOString());

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥:", error);
    return;
  }

  if (!expiredRentals || expiredRentals.length === 0) {
    console.log("–ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
    return;
  }

  for (const rental of expiredRentals) {
    const messageText = `‚ö†Ô∏è –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è "${rental.cars.name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1')}" –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${rental.user_name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1')}.`;

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageText}`);
    try {
      await ctx.telegram.sendMessage(adminChatId, messageText, { parse_mode: 'Markdown' });
      await ctx.telegram.sendMessage(adminAssistantChatId, messageText, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }

    // –í–µ—Ä–Ω—É—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    await supabase
      .from('cars')
      .update({ is_available: true })
      .eq('id', rental.car_id);

    // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ
    await supabase
      .from('used_cars')
      .delete()
      .eq('id', rental.id);
  }

  console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${expiredRentals.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥.`);
}

// –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–æ–∫–∞ –∞—Ä–µ–Ω–¥—ã (–º–µ—Å—è—Ü —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
async function handleTermToUsed(ctx, bookingId, userStates) {
  await ctx.answerCbQuery();
  userStates[ctx.from.id] = { state: 'awaiting_month_term', bookingId };
  await ctx.editMessageText("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∞—Ä–µ–Ω–¥—ã (—á–∏—Å–ª–æ):", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data: 'view_bookings' }]
      ]
    }
  });
}



module.exports = {
  handleChooseRentalDuration,
  handleAddToUsed,
  checkExpiredRentals,
  handleTermToUsed
};
